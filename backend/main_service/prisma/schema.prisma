generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @map("first_name") @db.VarChar(50)
  lastName  String   @map("last_name") @db.VarChar(50)
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  password  String   @db.Char(500)
  createdAt DateTime @default(now()) @map("created_at")

  posts    Post[]
  comments Comment[]

  followers Follow[] @relation("userFollowers")
  following Follow[] @relation("userFollowing")

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  text      String   @db.VarChar(500)
  createdAt DateTime @default(now()) @map("created_at")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  comments Comment[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String   @db.VarChar(500)
  createdAt DateTime @default(now()) @map("created_at")

  authorId Int  @map("author_id")
  author   User @relation(fields: [authorId], references: [id])

  postId Int  @map("post_id")
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  followerId Int  @map("follower_id")
  follower   User @relation("userFollowers", fields: [followerId], references: [id])

  followingId Int  @map("following_id")
  following   User @relation("userFollowing", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@map("follows")
}
